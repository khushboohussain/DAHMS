{"version":3,"sources":["webpack:///./src/app/employer/ads/create/step2/step2.module.ts","webpack:///./src/app/employer/ads/create/step2/step2.page.html","webpack:///./src/app/employer/ads/create/step2/step2.page.scss","webpack:///./src/app/employer/ads/create/step2/step2.page.ts"],"names":[],"mappings":"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","file":"employer-ads-create-step2-step2-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { Step2Page } from './step2.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: Step2Page\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [Step2Page]\r\n})\r\nexport class Step2PageModule {}\r\n","module.exports = \"<ion-content>\\r\\n  <div class=\\\"main\\\">\\r\\n    <div class=\\\"header container\\\">\\r\\n      <ion-back-button text=\\\"\\\" defaultHref=\\\"\\\" icon=\\\"arrow-round-back\\\"></ion-back-button>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"content\\\">\\r\\n      <!-- show if dates same (option 1) is clicked and continuous checkbox is not selected -->\\r\\n      <div *ngIf=\\\"option1;\\\" class=\\\" dates-same\\\">\\r\\n\\r\\n\\r\\n        <form [formGroup]=\\\"form\\\">\\r\\n          <div class=\\\"title container\\\">\\r\\n            <h2>Einsatz Template 1</h2>\\r\\n          </div>\\r\\n\\r\\n          <ion-list>\\r\\n            <div class=\\\"grid-2\\\">\\r\\n              <!-- start time -->\\r\\n              <ion-item lines=\\\"none\\\">\\r\\n                <ion-label position=\\\"stacked\\\">Startzeit </ion-label>\\r\\n                <ion-datetime displayFormat=\\\"HH:mm\\\" formControlName=\\\"startTime\\\" cancelText=\\\"Abbrechen\\\"\\r\\n                  doneText=\\\"Fertig\\\"> </ion-datetime>\\r\\n              </ion-item>\\r\\n\\r\\n              <!-- end time -->\\r\\n              <ion-item lines=\\\"none\\\">\\r\\n                <ion-label position=\\\"stacked\\\">Endzeit</ion-label>\\r\\n                <ion-datetime formControlName=\\\"endTime\\\" displayFormat=\\\"HH:mm\\\" cancelText=\\\"Abbrechen\\\" doneText=\\\"Fertig\\\">\\r\\n                </ion-datetime>\\r\\n              </ion-item>\\r\\n            </div>\\r\\n          </ion-list>\\r\\n          <div class=\\\"employee-info\\\">\\r\\n            <div class=\\\"title container\\\">\\r\\n              <h3>Einsatzkraft</h3>\\r\\n            </div>\\r\\n            <ion-list>\\r\\n\\r\\n              <!-- new field will add here -->\\r\\n              <div class=\\\"grid-2-l\\\">\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-label position=\\\"stacked\\\">Einsatzkraft</ion-label>\\r\\n                  <ion-select formControlName=\\\"qualification\\\" cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                    <ion-select-option value=\\\"SANITAETSHELFER\\\">Sanitätshelfer</ion-select-option>\\r\\n                    <ion-select-option value=\\\"RETTUNGSHELFER\\\">Rettungshelfer</ion-select-option>\\r\\n                    <ion-select-option value=\\\"RETTUNGSSANITAETER\\\">Rettungssanitäter</ion-select-option>\\r\\n                    <ion-select-option value=\\\"RETTUNGSASSISTENT\\\">Rettungsassistent</ion-select-option>\\r\\n                    <ion-select-option value=\\\"NOTFALLSANITAETER\\\">Notfallsanitäter</ion-select-option>\\r\\n                    <ion-select-option value=\\\"ARZT\\\">Arzt</ion-select-option>\\r\\n                    <ion-select-option value=\\\"ARZTRETTUNGSDIENST\\\">Arzt im Rettungsdienst</ion-select-option>\\r\\n                  </ion-select>\\r\\n                </ion-item>\\r\\n                <!-- how many of those employees -->\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-label position=\\\"stacked\\\">Anzahl</ion-label>\\r\\n                  <ion-input formControlName=\\\"requiredEmployees\\\" type=\\\"number\\\" clearInput></ion-input>\\r\\n                </ion-item>\\r\\n              </div>\\r\\n\\r\\n\\r\\n              <div *ngFor=\\\"let item of newField; let i = index \\\">\\r\\n                <ion-item float-right>\\r\\n                  <!-- {{i}} -->\\r\\n                  <!-- <ion-icon name=\\\"close\\\"  ></ion-icon> -->\\r\\n                  <ion-icon name=\\\"close-circle\\\" title=\\\"Remove newly created fields\\\" (click)=\\\"removeFieldx(i)\\\"></ion-icon>\\r\\n                </ion-item>\\r\\n\\r\\n\\r\\n                <div class=\\\"grid-2-l\\\">\\r\\n                  <!-- personal qualification -->\\r\\n                  <ion-item lines=\\\"none\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">Einsatzkraft</ion-label>\\r\\n                    <ion-select [(ngModel)]=\\\"item.otherQualification\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n                      cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                      <ion-select-option value=\\\"SANITAETSHELFER\\\">Sanitätshelfer</ion-select-option>\\r\\n                      <ion-select-option value=\\\"RETTUNGSHELFER\\\">Rettungshelfer</ion-select-option>\\r\\n                      <ion-select-option value=\\\"RETTUNGSSANITAETER\\\">Rettungssanitäter</ion-select-option>\\r\\n                      <ion-select-option value=\\\"RETTUNGSASSISTENT\\\">Rettungsassistent</ion-select-option>\\r\\n                      <ion-select-option value=\\\"NOTFALLSANITAETER\\\">Notfallsanitäter</ion-select-option>\\r\\n                      <ion-select-option value=\\\"ARZT\\\">Arzt</ion-select-option>\\r\\n                      <ion-select-option value=\\\"ARZTRETTUNGSDIENST\\\">Arzt im Rettungsdienst</ion-select-option>\\r\\n                    </ion-select>\\r\\n                  </ion-item>\\r\\n\\r\\n                  <!-- how many of those employees -->\\r\\n                  <ion-item lines=\\\"none\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">Anzahl</ion-label>\\r\\n                    <ion-input type=\\\"number\\\" [(ngModel)]=\\\"item.otherRequiredEmp\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n                      clearInput></ion-input>\\r\\n\\r\\n                  </ion-item>\\r\\n\\r\\n                </div>\\r\\n              </div>\\r\\n              <!-- new field creation end -->\\r\\n\\r\\n              <!-- wage -->\\r\\n              <div class=\\\"grid-2-l\\\">\\r\\n                <!-- money -->\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-label position=\\\"stacked\\\">Honorar</ion-label>\\r\\n                  <ion-input type=\\\"number\\\" formControlName=\\\"wage\\\" clearInput></ion-input>\\r\\n                </ion-item>\\r\\n\\r\\n                <!-- money per day or per hour paid -->\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-label position=\\\"stacked\\\">Tag/Std.</ion-label>\\r\\n                  <ion-select formControlName=\\\"wageType\\\" cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                    <ion-select-option value=\\\"HOURLY\\\">pro Stunde</ion-select-option>\\r\\n                    <ion-select-option value=\\\"DAILY\\\">pro Tag</ion-select-option>\\r\\n                  </ion-select>\\r\\n                </ion-item>\\r\\n              </div>\\r\\n\\r\\n              <!-- driving license -->\\r\\n              <ion-item lines=\\\"none\\\">\\r\\n                <ion-label position=\\\"stacked\\\">Führerschein benötigt?</ion-label>\\r\\n                <ion-select formControlName=\\\"drivingLicence\\\" cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                  <ion-select-option value=\\\"NO\\\">Kein Führerschein</ion-select-option>\\r\\n                  <ion-select-option value=\\\"BENEFICIAL\\\">Führerschein vorteilhaft</ion-select-option>\\r\\n                  <ion-select-option value=\\\"B\\\">B</ion-select-option>\\r\\n                  <ion-select-option value=\\\"B1\\\">B1</ion-select-option>\\r\\n                </ion-select>\\r\\n              </ion-item>\\r\\n            </ion-list>\\r\\n          </div>\\r\\n\\r\\n          <!-- create another \\\"employee-info\\\" just below the first one, the newly created one should have a remove icon so we can delete it if added by mistake -->\\r\\n          <div class=\\\"add-new container pointer\\\" (click)=\\\"addFieldx()\\\">\\r\\n            <ion-icon name=\\\"add\\\"></ion-icon>\\r\\n            <p>Weitere Einsatzkraft hinzufügen</p>\\r\\n          </div>\\r\\n\\r\\n          <!-- create ad -->\\r\\n          <div class=\\\"container\\\">\\r\\n            <div class=\\\"divider\\\"></div>\\r\\n            <ion-button color=\\\"primary\\\" expand=\\\"block\\\" [disabled]=\\\"form.invalid || form.pristine\\\"\\r\\n              (click)=\\\"submitForm(form)\\\">Jetzt Stelle erstellen\\r\\n            </ion-button>\\r\\n            <!--  -->\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n      </div>\\r\\n      <!-- show if dates same (Option 1) is clicked and continuous checkbox is selected -->\\r\\n      <div *ngIf=\\\"option2;\\\" class=\\\" dates-same-continuous\\\">\\r\\n\\r\\n        <form [formGroup]=\\\"form\\\">\\r\\n          <div class=\\\"title container\\\">\\r\\n            <h2>Einsatz Template 2</h2>\\r\\n          </div>\\r\\n\\r\\n          <ion-list>\\r\\n            <div class=\\\"grid-2\\\">\\r\\n              <!-- start time start date-->\\r\\n              <ion-item lines=\\\"none\\\">\\r\\n                <ion-label position=\\\"stacked\\\">Startzeit {{data.startDate | date}} </ion-label>\\r\\n                <ion-datetime formControlName=\\\"startTime\\\" displayFormat=\\\"HH:mm\\\" cancelText=\\\"Abbrechen\\\"\\r\\n                  doneText=\\\"Fertig\\\"></ion-datetime>\\r\\n              </ion-item>\\r\\n\\r\\n              <!-- end time end date-->\\r\\n              <ion-item lines=\\\"none\\\">\\r\\n                <ion-label position=\\\"stacked\\\">Endzeit {{data.endDate | date}}</ion-label>\\r\\n                <ion-datetime formControlName=\\\"endTime\\\" displayFormat=\\\"HH:mm\\\" cancelText=\\\"Abbrechen\\\" doneText=\\\"Fertig\\\">\\r\\n                </ion-datetime>\\r\\n              </ion-item>\\r\\n            </div>\\r\\n          </ion-list>\\r\\n\\r\\n          <div class=\\\"employee-info\\\">\\r\\n            <div class=\\\"title container\\\">\\r\\n              <h3>Einsatzkraft</h3>\\r\\n            </div>\\r\\n            <ion-list>\\r\\n              <div class=\\\"grid-2-l\\\">\\r\\n                <!-- personal qualification -->\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-label position=\\\"stacked\\\">Einsatzkraft</ion-label>\\r\\n                  <ion-select formControlName=\\\"qualification\\\" cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                    <ion-select-option value=\\\"SANITAETSHELFER\\\">Sanitätshelfer</ion-select-option>\\r\\n                    <ion-select-option value=\\\"RETTUNGSHELFER\\\">Rettungshelfer</ion-select-option>\\r\\n                    <ion-select-option value=\\\"RETTUNGSSANITAETER\\\">Rettungssanitäter</ion-select-option>\\r\\n                    <ion-select-option value=\\\"RETTUNGSASSISTENT\\\">Rettungsassistent</ion-select-option>\\r\\n                    <ion-select-option value=\\\"NOTFALLSANITAETER\\\">Notfallsanitäter</ion-select-option>\\r\\n                    <ion-select-option value=\\\"ARZT\\\">Arzt</ion-select-option>\\r\\n                    <ion-select-option value=\\\"ARZTRETTUNGSDIENST\\\">Arzt im Rettungsdienst</ion-select-option>\\r\\n                  </ion-select>\\r\\n                </ion-item>\\r\\n\\r\\n                <!-- how many of those employees -->\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-label position=\\\"stacked\\\">Anzahl</ion-label>\\r\\n                  <ion-input formControlName=\\\"requiredEmployees\\\" type=\\\"number\\\" clearInput></ion-input>\\r\\n                </ion-item>\\r\\n              </div>\\r\\n\\r\\n              <div *ngFor=\\\"let item of newField; let i = index \\\">\\r\\n                <ion-item float-right>\\r\\n                  <!-- {{i}} -->\\r\\n                  <!-- <ion-icon name=\\\"close\\\"  ></ion-icon> -->\\r\\n                  <ion-icon name=\\\"close-circle\\\" title=\\\"Remove newly created fields\\\" (click)=\\\"removeFieldx(i)\\\"></ion-icon>\\r\\n                </ion-item>\\r\\n\\r\\n\\r\\n                <div class=\\\"grid-2-l\\\">\\r\\n                  <!-- personal qualification -->\\r\\n                  <ion-item lines=\\\"none\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">Einsatzkraft</ion-label>\\r\\n                    <ion-select [(ngModel)]=\\\"item.otherQualification\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n                      cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                      <ion-select-option value=\\\"SANITAETSHELFER\\\">Sanitätshelfer</ion-select-option>\\r\\n                      <ion-select-option value=\\\"RETTUNGSHELFER\\\">Rettungshelfer</ion-select-option>\\r\\n                      <ion-select-option value=\\\"RETTUNGSSANITAETER\\\">Rettungssanitäter</ion-select-option>\\r\\n                      <ion-select-option value=\\\"RETTUNGSASSISTENT\\\">Rettungsassistent</ion-select-option>\\r\\n                      <ion-select-option value=\\\"NOTFALLSANITAETER\\\">Notfallsanitäter</ion-select-option>\\r\\n                      <ion-select-option value=\\\"ARZT\\\">Arzt</ion-select-option>\\r\\n                      <ion-select-option value=\\\"ARZTRETTUNGSDIENST\\\">Arzt im Rettungsdienst</ion-select-option>\\r\\n                    </ion-select>\\r\\n                  </ion-item>\\r\\n\\r\\n                  <!-- how many of those employees -->\\r\\n                  <ion-item lines=\\\"none\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">Anzahl</ion-label>\\r\\n                    <ion-input type=\\\"number\\\" [(ngModel)]=\\\"item.otherRequiredEmp\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n                      clearInput></ion-input>\\r\\n\\r\\n                  </ion-item>\\r\\n                </div>\\r\\n              </div>\\r\\n              <!-- new field creation end -->\\r\\n\\r\\n              <!-- wage -->\\r\\n              <div class=\\\"grid-2-l\\\">\\r\\n                <!-- money -->\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-label position=\\\"stacked\\\">Honorar</ion-label>\\r\\n                  <ion-input type=\\\"number\\\" formControlName=\\\"wage\\\" clearInput></ion-input>\\r\\n                </ion-item>\\r\\n\\r\\n                <!-- money per day or per hour paid -->\\r\\n                <ion-item lines=\\\"none\\\">\\r\\n                  <ion-label position=\\\"stacked\\\">Tag/Std.</ion-label>\\r\\n                  <ion-select formControlName=\\\"wageType\\\" cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                    <ion-select-option value=\\\"HOURLY\\\">pro Stunde</ion-select-option>\\r\\n                    <ion-select-option value=\\\"DAILY\\\">pro Tag</ion-select-option>\\r\\n                  </ion-select>\\r\\n                </ion-item>\\r\\n              </div>\\r\\n              <!-- driving license -->\\r\\n              <ion-item lines=\\\"none\\\">\\r\\n                <ion-label position=\\\"stacked\\\">Führerschein benötigt?</ion-label>\\r\\n                <ion-select formControlName=\\\"drivingLicence\\\" cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                  <ion-select-option value=\\\"NO\\\">Kein Führerschein</ion-select-option>\\r\\n                  <ion-select-option value=\\\"BENEFICIAL\\\">Führerschein vorteilhaft</ion-select-option>\\r\\n                  <ion-select-option value=\\\"B\\\">B</ion-select-option>\\r\\n                  <ion-select-option value=\\\"B1\\\">B1</ion-select-option>\\r\\n                </ion-select>\\r\\n              </ion-item>\\r\\n            </ion-list>\\r\\n          </div>\\r\\n\\r\\n          <!-- create another \\\"employee-info\\\" just below the first one, the newly created one should have a remove icon so we can delete it if added by mistake -->\\r\\n          <div class=\\\"add-new container pointer\\\" (click)=\\\"addFieldx()\\\">\\r\\n            <ion-icon name=\\\"add\\\"></ion-icon>\\r\\n            <p>Weitere Einsatzkraft hinzufügen</p>\\r\\n          </div>\\r\\n\\r\\n          <!-- create ad -->\\r\\n          <div class=\\\"container\\\">\\r\\n            <div class=\\\"divider\\\"></div>\\r\\n            <ion-button color=\\\"primary\\\" expand=\\\"block\\\" [disabled]=\\\"form.invalid || form.pristine\\\"\\r\\n              (click)=\\\"submitForm(form)\\\">Jetzt Stelle erstellen\\r\\n            </ion-button>\\r\\n          </div>\\r\\n\\r\\n        </form>\\r\\n      </div>\\r\\n\\r\\n\\r\\n      <!-- show if dates different (Option 2) is clicked and continuous checkbox is not selected -->\\r\\n\\r\\n      <div *ngIf=\\\"option3\\\" class=\\\"dates-different\\\">\\r\\n        <ion-slides #slides>\\r\\n          <!-- show for each date an own form/slide; in last slide the submit button will be to confirm, else it should just go to the next slide -->\\r\\n          <ion-slide *ngFor=\\\"let item of form2; let i = index;\\\">\\r\\n            <form [formGroup]=\\\"form2[i]\\\">\\r\\n              <div class=\\\"title container\\\">\\r\\n                <h2>Einsatz</h2>\\r\\n                <!-- Data for day {{i+1}} <br> -->\\r\\n                <!-- {{dateStart | date}} -->\\r\\n                <!-- {{dateEnd | date}} -->\\r\\n\\r\\n                <!-- get data from last slide, if first slide then don't show -->\\r\\n                <div class=\\\"add-new\\\" *ngIf=\\\"i > 0\\\" (click)=\\\"goBack()\\\">\\r\\n                  <ion-icon name=\\\"add\\\"></ion-icon>\\r\\n                  <p>Voherige Daten übernehmen </p>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <ion-list>\\r\\n                <div class=\\\"grid-2\\\">\\r\\n                  <!-- start time -->\\r\\n                  <ion-item lines=\\\"none\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">Startzeit</ion-label>\\r\\n                    <ion-datetime formControlName=\\\"startTime\\\" displayFormat=\\\"HH:mm\\\" cancelText=\\\"Abbrechen\\\"\\r\\n                      doneText=\\\"Fertig\\\"></ion-datetime>\\r\\n                  </ion-item>\\r\\n\\r\\n                  <!-- end time -->\\r\\n                  <ion-item lines=\\\"none\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">Endzeit</ion-label>\\r\\n                    <ion-datetime formControlName=\\\"endTime\\\" displayFormat=\\\"HH:mm\\\" cancelText=\\\"Abbrechen\\\"\\r\\n                      doneText=\\\"Fertig\\\"></ion-datetime>\\r\\n                  </ion-item>\\r\\n                </div>\\r\\n              </ion-list>\\r\\n\\r\\n              <div class=\\\"employee-info\\\">\\r\\n                <div class=\\\"title container\\\">\\r\\n                  <h3>Einsatzkraft</h3>\\r\\n                </div>\\r\\n\\r\\n                <ion-list>\\r\\n                  <div class=\\\"grid-2-l\\\">\\r\\n                    <!-- personal qualfication-->\\r\\n                    <ion-item lines=\\\"none\\\">\\r\\n                      <ion-label position=\\\"stacked\\\">Einsatzkraft</ion-label>\\r\\n                      <ion-select formControlName=\\\"qualification\\\" cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                        <ion-select-option value=\\\"SANITAETSHELFER\\\">Sanitätshelfer</ion-select-option>\\r\\n                        <ion-select-option value=\\\"RETTUNGSHELFER\\\">Rettungshelfer</ion-select-option>\\r\\n                        <ion-select-option value=\\\"RETTUNGSSANITAETER\\\">Rettungssanitäter</ion-select-option>\\r\\n                        <ion-select-option value=\\\"RETTUNGSASSISTENT\\\">Rettungsassistent</ion-select-option>\\r\\n                        <ion-select-option value=\\\"NOTFALLSANITAETER\\\">Notfallsanitäter</ion-select-option>\\r\\n                        <ion-select-option value=\\\"ARZT\\\">Arzt</ion-select-option>\\r\\n                        <ion-select-option value=\\\"ARZTRETTUNGSDIENST\\\">Arzt im Rettungsdienst</ion-select-option>\\r\\n                      </ion-select>\\r\\n                    </ion-item>\\r\\n\\r\\n                    <!-- how many of those employees -->\\r\\n                    <ion-item lines=\\\"none\\\">\\r\\n                      <ion-label position=\\\"stacked\\\">Anzahl</ion-label>\\r\\n                      <ion-input formControlName=\\\"requiredEmployees\\\" type=\\\"number\\\" clearInput></ion-input>\\r\\n                    </ion-item>\\r\\n                  </div>\\r\\n\\r\\n                  <div *ngFor=\\\"let extra of extraWorkforce; let j = index\\\">\\r\\n                    <ion-item float-right *ngIf=\\\"extra.index === i\\\">\\r\\n                      <!-- {{i}} -->\\r\\n                      <!-- <ion-icon name=\\\"close\\\"  ></ion-icon> -->\\r\\n                      <ion-icon name=\\\"close-circle\\\" title=\\\"Remove newly created fields\\\" (click)=\\\"removeField(j)\\\">\\r\\n                      </ion-icon>\\r\\n                    </ion-item>\\r\\n\\r\\n                    <div class=\\\"grid-2-l\\\" *ngIf=\\\"extra.index === i\\\">\\r\\n                      <!-- personal qualification -->\\r\\n                      <ion-item lines=\\\"none\\\">\\r\\n                        <ion-label position=\\\"stacked\\\">Einsatzkraft</ion-label>\\r\\n                        <ion-select [(ngModel)]=\\\"extra.qualification\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n                          cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                          <ion-select-option value=\\\"SANITAETSHELFER\\\">Sanitätshelfer</ion-select-option>\\r\\n                          <ion-select-option value=\\\"RETTUNGSHELFER\\\">Rettungshelfer</ion-select-option>\\r\\n                          <ion-select-option value=\\\"RETTUNGSSANITAETER\\\">Rettungssanitäter</ion-select-option>\\r\\n                          <ion-select-option value=\\\"RETTUNGSASSISTENT\\\">Rettungsassistent</ion-select-option>\\r\\n                          <ion-select-option value=\\\"NOTFALLSANITAETER\\\">Notfallsanitäter</ion-select-option>\\r\\n                          <ion-select-option value=\\\"ARZT\\\">Arzt</ion-select-option>\\r\\n                          <ion-select-option value=\\\"ARZTRETTUNGSDIENST\\\">Arzt im Rettungsdienst</ion-select-option>\\r\\n                        </ion-select>\\r\\n                      </ion-item>\\r\\n\\r\\n                      <!-- how many of those employees -->\\r\\n                      <ion-item lines=\\\"none\\\">\\r\\n                        <ion-label position=\\\"stacked\\\">Anzahl</ion-label>\\r\\n                        <ion-input type=\\\"number\\\" [(ngModel)]=\\\"extra.requiredEmployees\\\"\\r\\n                          [ngModelOptions]=\\\"{standalone: true}\\\" clearInput></ion-input>\\r\\n\\r\\n                      </ion-item>\\r\\n\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <!-- new field creation end -->\\r\\n\\r\\n                  <!-- wage -->\\r\\n                  <div class=\\\"grid-2-l\\\">\\r\\n                    <!-- money -->\\r\\n                    <ion-item lines=\\\"none\\\">\\r\\n                      <ion-label position=\\\"stacked\\\">Honorar</ion-label>\\r\\n                      <ion-input formControlName=\\\"wage\\\" type=\\\"number\\\" clearInput></ion-input>\\r\\n                    </ion-item>\\r\\n\\r\\n                    <!-- money per day or per hour paid -->\\r\\n                    <ion-item lines=\\\"none\\\">\\r\\n                      <ion-label position=\\\"stacked\\\">Tag/Std.</ion-label>\\r\\n                      <ion-select formControlName=\\\"wageType\\\" cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                        <ion-select-option value=\\\"HOURLY\\\">pro Stunde</ion-select-option>\\r\\n                        <ion-select-option value=\\\"DAILY\\\">pro Tag</ion-select-option>\\r\\n                      </ion-select>\\r\\n                    </ion-item>\\r\\n                  </div>\\r\\n\\r\\n                  <!-- driving license -->\\r\\n                  <ion-item lines=\\\"none\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">Führerschein benötigt?</ion-label>\\r\\n                    <ion-select formControlName=\\\"drivingLicence\\\" cancelText=\\\"Abbrechen\\\" okText=\\\"Fertig\\\">\\r\\n                      <ion-select-option value=\\\"NO\\\">Kein Führerschein</ion-select-option>\\r\\n                      <ion-select-option value=\\\"BENEFICIAL\\\">Führerschein vorteilhaft</ion-select-option>\\r\\n                      <ion-select-option value=\\\"B\\\">B</ion-select-option>\\r\\n                      <ion-select-option value=\\\"B1\\\">B1</ion-select-option>\\r\\n                    </ion-select>\\r\\n                  </ion-item>\\r\\n                </ion-list>\\r\\n              </div>\\r\\n\\r\\n              <!-- create another \\\"employee-info\\\" just below the first one, the newly created one should have a remove icon so we can delete it if added by mistake -->\\r\\n              <div class=\\\"add-new container pointer\\\" (click)=\\\"addField(i)\\\">\\r\\n                <ion-icon name=\\\"add\\\"></ion-icon>\\r\\n                <p>Weitere Einsatzkraft hinzufügen</p>\\r\\n              </div>\\r\\n\\r\\n              <!-- create ad -->\\r\\n              <div class=\\\"container\\\">\\r\\n                <div class=\\\"divider\\\"></div>\\r\\n                <ion-button color=\\\"primary\\\" expand=\\\"block\\\" *ngIf=\\\"i < days-1\\\"\\r\\n                  [disabled]=\\\"form2[i].invalid || form2[i].pristine\\\" (click)=\\\"nextSlide()\\\">Next Slide\\r\\n                </ion-button>\\r\\n                <ion-button color=\\\"primary\\\" expand=\\\"block\\\" *ngIf=\\\"i == days-1 \\\"\\r\\n                  [disabled]=\\\"form2[i].invalid || form2[i].pristine\\\" (click)=\\\"submitForm(form2)\\\">Jetzt Stelle erstellen\\r\\n                </ion-button>\\r\\n              </div>\\r\\n            </form>\\r\\n          </ion-slide>\\r\\n\\r\\n        </ion-slides>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</ion-content>\"","module.exports = \".add-new {\\n  display: grid;\\n  grid-template-columns: 20px auto;\\n  align-items: center; }\\n\\nion-slide {\\n  text-align: left; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZW1wbG95ZXIvYWRzL2NyZWF0ZS9zdGVwMi9EOlxcS29kZUFscGhhXFxXb3Jrc3BhY2VcXFByb2plY3RzXFxEQUhNU1xcVGVzdFxcU2FhZC9zcmNcXGFwcFxcZW1wbG95ZXJcXGFkc1xcY3JlYXRlXFxzdGVwMlxcc3RlcDIucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLGdDQUFnQztFQUNoQyxtQkFBbUIsRUFBQTs7QUFHckI7RUFBWSxnQkFBZ0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2VtcGxveWVyL2Fkcy9jcmVhdGUvc3RlcDIvc3RlcDIucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmFkZC1uZXcge1xyXG4gIGRpc3BsYXk6IGdyaWQ7XHJcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyMHB4IGF1dG87XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG5cclxuaW9uLXNsaWRlIHsgdGV4dC1hbGlnbjogbGVmdDsgfSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { NavController, IonSlides } from '@ionic/angular';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { HelperService } from 'src/app/services/helper.service';\r\nimport * as moment from 'moment';\r\nimport { ViewChild } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-step2',\r\n  templateUrl: './step2.page.html',\r\n  styleUrls: ['./step2.page.scss'],\r\n})\r\nexport class Step2Page implements OnInit {\r\n\r\n  @ViewChild('slides') slides: IonSlides;\r\n\r\n  form: FormGroup;\r\n  form2: Array<FormGroup> = [];\r\n  data: any;\r\n  record;\r\n\r\n  newField: any = [];\r\n  days: number;\r\n  otherQualification = '';\r\n  otherRequiredEmployees = null;\r\n\r\n  option1: boolean;\r\n  option2: boolean;\r\n  option3: boolean;\r\n\r\n  actionController: boolean;\r\n  continuoueCheck: boolean;\r\n  dateStart;\r\n  dateEnd: Date;\r\n  extraWorkforce = [];\r\n\r\n\r\n\r\n  constructor(private navController: NavController, private fb: FormBuilder, private api: ApiService, public helper: HelperService) { }\r\n\r\n  ngOnInit() {\r\n    // Retrieve the object from storage\r\n    this.data = JSON.parse(localStorage.getItem('AdsData'));\r\n    // console.log('retrieved Object: \\n', this.data);\r\n\r\n    this.dateStart = this.data.startDate;\r\n\r\n    this.actionController = JSON.parse(localStorage.getItem('actionController'));\r\n    this.continuoueCheck = JSON.parse(localStorage.getItem('continuoueCheck'));\r\n    // this.continuoueCheck = JSON.parse(localStorage.getItem('continuoueCheck'));\r\n    // this.differDates = JSON.parse(localStorage.getItem(\"differDates\"));\r\n    // console.log('differDates check is ' + this.differDates);\r\n\r\n    // this.continuoueCheck = JSON.parse(localStorage.getItem(\"continuoueCheck\"));\r\n\r\n    /*     console.log('actionController ', this.actionController);\r\n        console.log(typeof this.actionController);\r\n        console.log('continuoueCheck ', this.continuoueCheck);\r\n        console.log(typeof this.continuoueCheck); */\r\n\r\n\r\n    // checking conditions for showing proper template\r\n\r\n    // Template 1 will execute\r\n    if (this.actionController === true && this.continuoueCheck === false) {\r\n      this.option1 = true;\r\n      this.option2 = false;\r\n      this.option3 = false;\r\n      // from builder\r\n      this.form = this.fb.group({\r\n        startTime: ['', Validators.required],\r\n        endTime: ['', Validators.required],\r\n        qualification: ['', Validators.required],\r\n        requiredEmployees: ['', Validators.required],\r\n        wage: ['', Validators.required],\r\n        wageType: ['', Validators.required],\r\n        drivingLicence: ['', Validators.required]\r\n\r\n      });\r\n      // localStorage.setItem('option3', JSON.stringify(this.option3));\r\n      // localStorage.setItem('option1', JSON.stringify(this.option1));\r\n      // localStorage.setItem('actionController', JSON.stringify(this.actionController));\r\n    } else if (this.actionController === true && this.continuoueCheck === true) {\r\n      this.option1 = false;\r\n      this.option2 = true;\r\n      this.option3 = false;\r\n      // from builder\r\n      this.form = this.fb.group({\r\n        startTime: ['', Validators.required],\r\n        endTime: ['', Validators.required],\r\n        qualification: ['', Validators.required],\r\n        requiredEmployees: ['', Validators.required],\r\n        wage: ['', Validators.required],\r\n        wageType: ['', Validators.required],\r\n        drivingLicence: ['', Validators.required]\r\n      });\r\n      // Template 3\r\n    } else if (this.actionController === false && this.continuoueCheck === false) {\r\n      this.option1 = false;\r\n      this.option2 = false;\r\n      this.option3 = true;\r\n      // from builder\r\n      this.form = this.fb.group({\r\n        startTime: ['', Validators.required],\r\n        endTime: ['', Validators.required],\r\n        qualification: ['', Validators.required],\r\n        requiredEmployees: ['', Validators.required],\r\n        wage: ['', Validators.required],\r\n        wageType: ['', Validators.required],\r\n\r\n        drivingLicence: ['', Validators.required]\r\n      });\r\n      // console.log(JSON.parse(localStorage.getItem('day')));\r\n\r\n      this.days = JSON.parse(localStorage.getItem('days'));\r\n\r\n      // console.log('Days are:  ', this.days);\r\n      // console.log(typeof this.days);\r\n\r\n      // console.log(moment(this.data.startDate).format());\r\n      // console.log(moment(this.data.endDate).format());\r\n\r\n      for (let i = 0; i < this.days; i++) {\r\n        this.form2.push(\r\n          this.form = this.fb.group({\r\n            startTime: ['', Validators.required],\r\n            endTime: ['', Validators.required],\r\n            qualification: ['', Validators.required],\r\n            requiredEmployees: ['', Validators.required],\r\n            otherQualification: [],\r\n            wage: ['', Validators.required],\r\n            wageType: ['', Validators.required],\r\n            drivingLicence: ['', Validators.required]\r\n          })\r\n        );\r\n        // this.dateStart = moment(this.dateStart).add(i, 'days').format();\r\n        // console.log('Adding 1', this.dateStart);\r\n      }\r\n      setTimeout(() => {\r\n        this.slides.lockSwipes(true);\r\n      }, 1000);\r\n\r\n    }\r\n  }\r\n  /* ngOnInit end */\r\n\r\n\r\n\r\n  // For adding new input field for template 1 and 2\r\n  addFieldx() {\r\n    this.otherQualification = '';\r\n    this.otherRequiredEmployees = null;\r\n    this.newField.push({\r\n      qualification: '',\r\n      requiredEmployees: null\r\n    });\r\n  }\r\n  removeFieldx(index: number) {\r\n    // console.log('Remove Field is working...');\r\n    // this.otherQualification = '';\r\n    // this.otherRequiredEmployees = null;\r\n    this.newField.splice(index, 1);\r\n    // console.log('successfuly deleted item number '+ index);\r\n  }\r\n\r\n  // For adding new input field for template 3\r\n  addField(i) {\r\n    // jd logic only for Template 3\r\n    // console.log(i)\r\n    if (i >= 0) {\r\n      this.extraWorkforce.push({\r\n        qualification: '',\r\n        requiredEmployees: 0,\r\n        index: i\r\n      });\r\n    } else {\r\n      this.extraWorkforce.push({\r\n        qualification: '',\r\n        requiredEmployees: 0\r\n      });\r\n    }\r\n\r\n    // console.log(this.extraWorkforce)\r\n\r\n  }\r\n  removeField(index) {\r\n    // console.log('Remove Field is working...');\r\n    // this.otherQualification = '';\r\n    // this.otherRequiredEmployees = null;\r\n    this.extraWorkforce.splice(index, 1);\r\n    // console.log('successfuly deleted item number '+ index);\r\n  }\r\n\r\n  nextSlide() {\r\n    // console.log('Actual Date ', this.dateStart);\r\n    this.slides.lockSwipes(false);\r\n    this.slides.slideNext().then(() => { this.slides.lockSwipes(true); });\r\n    // this.dateStart = moment(this.dateStart).add(1, 'days').format();\r\n    // console.log('Adding 1', this.dateStart);\r\n\r\n  }\r\n\r\n  goBack() {\r\n    this.slides.lockSwipes(false);\r\n    // this.dateStart = moment(this.dateStart).subtract(1, 'days').format();\r\n    // console.log('Minus 1 ', this.dateStart);\r\n    // this.slides.slidePrev().then(() => { this.slides.lockSwipes(true); });\r\n  }\r\n  // getQulalifications(item) {\r\n  //   console.log(item.value);\r\n\r\n\r\n  // }\r\n  // getRegEmp(item) {\r\n  //   console.log(item.value);\r\n\r\n  // }\r\n\r\n  // Form Submit Method\r\n  submitForm(form: any) {\r\n    // submit method for template 1 and 3\r\n    // console.log('form values ', form);\r\n    if (this.option2 !== true) {\r\n      // for condition 3\r\n      if (this.option3 === true) {\r\n        this.record = {\r\n          jobTitle: this.data.jobTitle,\r\n          location: this.data.address,\r\n          startDate: this.data.startDate,\r\n          endDate: this.data.endDate,\r\n          fastReply: this.data.fastReply,\r\n\r\n          confirmEmployee: [],\r\n          confirmEmployeeIds: [],\r\n\r\n          step2: [],\r\n          // otherQualification: [],\r\n          uid: localStorage.getItem('uid'),\r\n          condition1: false,\r\n          condition2: false,\r\n          condition3: true\r\n        };\r\n\r\n        form.forEach(a => {\r\n          this.record.step2.push(a.value);\r\n        });\r\n\r\n        if (this.extraWorkforce.length > 0) {\r\n          this.extraWorkforce.forEach(a => {\r\n            if (a.index >= 0) {\r\n              if (this.record.step2[a.index].otherQualification === null) {\r\n                this.record.step2[a.index].otherQualification = [];\r\n              } else {\r\n                this.record.step2[a.index].otherQualification.push({\r\n                  qualification: a.qualification,\r\n                  requiredEmployees: a.requiredEmployees\r\n                });\r\n              }\r\n\r\n            }\r\n          });\r\n        }\r\n\r\n        // this.newField.forEach(a => {\r\n        //   this.record.otherQualification.push({\r\n        //     qualification: a.otherQualification,\r\n        //     requiredEmployees: a.otherRequiredEmployees\r\n        //   });\r\n        // });\r\n        // console.log(this.record);\r\n\r\n        // getting values from Step2\r\n        //  startTime: form.value.startTime,\r\n        //  endTime: form.value.endTime,\r\n\r\n        //  qualification: form.value.qualification,\r\n        //  requiredEmployees: form.value.requiredEmployees,\r\n        //  otherQualification: [],\r\n\r\n        //  wage: form.value.wage,\r\n        //  wageType: form.value.wageType,\r\n        //  drivingLinse: form.value.drivingLicence,\r\n        // console.log('Record ', this.record);\r\n        // this.newField.forEach(a => {\r\n        // });\r\n        // this.adDetail.push(record)\r\n        // console.log(record);\r\n\r\n        this.api.createAds(this.record)\r\n          .then(res => {\r\n            this.helper.presentToast(' Ad Created Successfuliy!');\r\n            this.navController.navigateRoot('/employer/ads/create/step3');\r\n          }, err => {\r\n            this.helper.presentToast(err.message + 'Error!');\r\n          });\r\n        // end of template 3\r\n      } else {\r\n        //  for condition 1\r\n        const record = {\r\n          jobTitle: this.data.jobTitle,\r\n          location: this.data.address,\r\n          startDate: this.data.startDate,\r\n          endDate: this.data.endDate,\r\n          fastReply: this.data.fastReply,\r\n\r\n          confirmEmployee: [],\r\n          confirmEmployeeIds: [],\r\n\r\n          startTime: form.value.startTime,\r\n          endTime: form.value.endTime,\r\n\r\n          qualification: form.value.qualification,\r\n          requiredEmployees: form.value.requiredEmployees,\r\n\r\n          // abc: this.newField[0].otherQualification,\r\n          // xyz: this.newField[0].otherRequiredEmp,\r\n\r\n          otherQualification: [],\r\n          // otherRequiredEmp: [],\r\n\r\n\r\n          wage: form.value.wage,\r\n          wageType: form.value.wageType,\r\n          drivingLinse: form.value.drivingLicence,\r\n          uid: localStorage.getItem('uid'),\r\n          condition1: true,\r\n          condition2: false,\r\n          condition3: false\r\n          // drivingLicence: form.value.drivingLicence[0].text,\r\n          // licence: form.value.licence\r\n        };\r\n        // localStorage.setItem('option', JSON.stringify(false));\r\n        // console.log(record);\r\n        this.newField.forEach(a => {\r\n          record.otherQualification.push({\r\n            qualification: a.otherQualification,\r\n            requiredEmployees: a.otherRequiredEmp\r\n          }\r\n          );\r\n        });\r\n        // console.log(record);\r\n        this.api.createAds(record)\r\n          .then(res => {\r\n            this.helper.presentToast(' Ad Created Successfuliy!');\r\n            this.navController.navigateRoot('/employer/ads/create/step3');\r\n          }, err => {\r\n            this.helper.presentToast(err.message + 'Error!');\r\n          });\r\n      }\r\n\r\n    } else {\r\n      // for tempate 2\r\n      const record = {\r\n        jobTitle: this.data.jobTitle,\r\n        location: this.data.address,\r\n        startDate: this.data.startDate,\r\n        endDate: this.data.endDate,\r\n        fastReply: this.data.fastReply,\r\n\r\n        startTime: form.value.startTime,\r\n        endTime: form.value.endTime,\r\n\r\n        qualification: form.value.qualification,\r\n        requiredEmployees: form.value.requiredEmployees,\r\n        otherQualification: [],\r\n\r\n        confirmEmployee: [],\r\n        confirmEmployeeIds: [],\r\n\r\n        wage: form.value.wage,\r\n        wageType: form.value.wageType,\r\n        drivingLinse: form.value.drivingLicence,\r\n        uid: localStorage.getItem('uid'),\r\n        condition1: false,\r\n        condition2: true,\r\n        condition3: false\r\n\r\n      };\r\n      // localStorage.setItem('option', JSON.stringify(false));\r\n      // console.log(record);\r\n\r\n      this.newField.forEach(a => {\r\n        record.otherQualification.push({\r\n          qualification: a.otherQualification,\r\n          requiredEmployees: a.otherRequiredEmp\r\n        }\r\n        );\r\n      });\r\n      // console.log(record);\r\n\r\n      this.api.createAds(record)\r\n        .then(res => {\r\n          this.helper.presentToast(' Ad Created Successfuliy!');\r\n          this.navController.navigateRoot('/employer/ads/create/step3');\r\n        }, err => {\r\n          this.helper.presentToast(err.message + 'Error!');\r\n        });\r\n\r\n    }\r\n\r\n    // end Else Bloack\r\n  } // end SubmitForm method\r\n\r\n\r\n\r\n\r\n}\r\n"],"sourceRoot":""}